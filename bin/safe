#!/usr/bin/env python
import sys
import os
import errno
import argparse
import yaml
from safe import Safe


def main():
  """ Allows user to interface with safe. """
  # set up django environment
  safe = Safe()

  safe_parser = argparse.ArgumentParser(prog='safe', description='Access safe.')
  safe_subparsers = safe_parser.add_subparsers()

  # add create subcommand, which allows a user to create a new safe
  create_parser = safe_subparsers.add_parser('create', help='Create a safe.')
  create_parser.add_argument('safe_name', help='Unique name for the safe')
  create_parser.set_defaults(func=handle_create)

  # add show subcommand, which lists all the safes the user has
  show_parser = safe_subparsers.add_parser('show', help='List all available safes.')
  show_parser.set_defaults(func=handle_show)

  # add delete subcommand, which removes a given safe
  delete_parser = safe_subparsers.add_parser('delete', help='Remove a safe.')
  delete_parser.add_argument('safe_name', help='Name of the safe being deleted.')
  delete_parser.set_defaults(func=handle_delete)

  # add set subcommand, which allows user to the set the current safe they are in
  set_parser = safe_subparsers.add_parser('set', help='Set current safe.')
  set_parser.add_argument('safe_name', help='Unique name for the safe')
  set_parser.set_defaults(func=handle_set)

  # add current subcommand, which allows the user to see which safe they are in
  current_parser = safe_subparsers.add_parser('current', help='Shows current safe.')
  current_parser.set_defaults(func=handle_current)

  # add store subcommand, which allows a user to store a document
  store_parser = safe_subparsers.add_parser('store', help='Store a document into the safe.')
  store_parser.add_argument('document_name', help='Document name to store.')
  store_parser.set_defaults(func=handle_store)

  # add cat subcommand, which allows a user to read a document
  cat_parser = safe_subparsers.add_parser('cat', help='Read a document from the safe.')
  cat_parser.add_argument('document_name', help='Document name to read.')
  cat_parser.set_defaults(func=handle_cat)

  # add ls subcommand, which allows a user to list all stored documents
  ls_parser = safe_subparsers.add_parser('ls', help='List documents in safe.')
  ls_parser.set_defaults(func=handle_ls)

  # add rm subcommand, which allows a user to delete a document
  rm_parser = safe_subparsers.add_parser('rm', help='Delete document from safe.')
  rm_parser.add_argument('document_name', help='Document name to delete.')
  rm_parser.set_defaults(func=handle_rm)

  # add release subcommand, which allows one user to release a document to another user
  release_parser = safe_subparsers.add_parser('release',
    help='Release document to another user.')
  release_parser.add_argument('document_name', help='Document name to release.')
  release_parser.add_argument('recipient_email',
    help='Recipient email to release to.', nargs='+')
  release_parser.set_defaults(func=handle_release)

  # add revoke subcommand, which allows one user to revoke a document from another user
  revoke_parser = safe_subparsers.add_parser('revoke',
    help='Revoke document from another user.')
  revoke_parser.add_argument('document_name', help='Document name to revoke.')
  revoke_parser.add_argument('recipient_email',
    help='Recipient email to revoke from.', nargs='+')
  revoke_parser.set_defaults(func=handle_revoke)

  # add fetch subcommand, which allows a user to fetch files according to a configuration
  fetch_parser = safe_subparsers.add_parser('fetch',
    help='Fetch files according to a configuration.')
  fetch_parser.add_argument('config_file', help='YAML configuration file.')
  fetch_parser.set_defaults(func=handle_fetch)

  args = safe_parser.parse_args()
  args.func(safe, args)


def handle_create(safe, args):
  """ Allows the user to create a safe. """
  safe.create(args.safe_name)


def handle_show(safe, args):
  """ Allows the user to view all available safes. """
  safes = safe.show()
  if len(safes) > 0:
    print '\n'.join(safes)


def handle_delete(safe, args):
  """ Allows the user to delete a safe. """
  safe.delete(args.safe_name)


def handle_set(safe, args):
  """ Allows the user to set the safe they are in. """
  safe.set(args.safe_name)


def handle_current(safe, args):
  """ Allows user to view the name of the safe they are in. """
  safe_name = safe.current()
  if safe_name:
    print safe_name
  else:
    print 'You are not in a safe. Use [safe set] to set the current safe.'


def handle_store(safe, args):
  """ Allows the user to store a document. """
  document_text = safe.read(args.document_name)

  if not document_text == None:
    print 'Document %s has the following contents:' % args.document_name
    print document_text

    # ask the user to confirm before overwriting
    confirm = raw_input("Are you sure you'd like to overwrite it? [y/n] ")
    if not confirm == 'y':
      print 'Cancelled.'
      return

  print "Enter the document text you'd like to store:"
  document_text = ''

  # read user input to get document text
  while True:
    try:
      document_text += raw_input() + '\n'
    except EOFError:
      break

  safe.store(args.document_name, document_text)
  print 'Document %s successfully stored.' % args.document_name


def handle_cat(safe, args):
  """ Allows the user to read a document. """
  document_text = safe.read(args.document_name)
  if document_text == None:
    print 'No such document exists.'
  else:
    print document_text


def handle_ls(safe, args):
  """ Allows the user to list stored documents. """
  documents = safe.list()
  if len(documents) > 0:
    print '\n'.join(safe.list())


def handle_rm(safe, args):
  document_text = safe.read(args.document_name)

  if document_text == None:
    print 'No such document exists.'
  else:
    print 'Document %s has the following contents:' % args.document_name
    print document_text

    # ask the user to confirm before deleting document
    confirm = raw_input("Are you sure you'd like to delete it? [y/n] ")

    if confirm == 'y':
      # confirm document exists again; it may have been deleted while we were
      # waiting for user input
      if safe.delete(args.document_name):
        print 'Document %s successfully deleted.' % args.document_name
      else:
        print 'No such document exists.'
    else:
      print 'Cancelled.'


def handle_release(safe, args):
  """ Allows the user to release a document to a recipient. """
  for recipient_email in args.recipient_email:
    success = safe.release(args.document_name, recipient_email)
    if success:
      print ('Successfully released document %s to %s.' %
        (args.document_name, recipient_email))
    else:
      print ('Failed to release document %s; are you sure you can read it?' %
        args.document_name)


def handle_revoke(safe, args):
  """ Allows the user to revoke a document from a recipient. """
  for recipient_email in args.recipient_email:
    success = safe.revoke(args.document_name, args.recipient_email)
    if success:
      print ('Successfully revoked document %s from %s.' %
        (args.document_name, recipient_email))
    else:
      print ('Failed to revoke document %s; are you sure it exists?' %
        args.document_name)


def handle_fetch(safe, args):
  """ Allows the user to fetch files based off a configuration. """
  with open(args.config_file, 'r') as handle:
    config = yaml.load(handle)

  # config['files'] is in the following form:
  #   {
  #     document_name: local_path,
  #     ...
  #   }
  # Fetch each document to its corresponding local path.
  for document_name, path in config['files'].iteritems():
    print 'Downloading %s to %s' % (document_name, path)
    dirs = os.path.dirname(path)

    # make directories if necessary
    if len(dirs) > 0:
      mkdir_p(dirs)

    with open(path, 'w') as handle:
      handle.write(safe.read(document_name) + '\n')


def mkdir_p(path):
  """ Emulates mkdir -p. Does not throw an exception if directories already exist. """
  try:
    os.makedirs(path)
  except OSError as exception:
    if not exception.errno == errno.EEXIST or not os.path.isdir(path):
      raise


if __name__ == '__main__':
  main()
